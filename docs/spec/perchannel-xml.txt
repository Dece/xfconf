-> High-level overview:

   The Per-channel XML configuration store backend is a simple
   file-based backend that stores the properties and values for
   each channel in its own file.  The file is hierarchical and may
   look something like this:
   
   <?xml version="1.0" encoding="UTF-8"?>
   <channel name="HappyApp" version="1.0">
       <property name="main" type="empty">
           <property name="allow-editing" type="bool" value="true"/>
           <property name="last-document" type="string" value="foo.txt"/>
       </property>
       <property name="history" type="strlist">
           <string>foo.txt</string>
           <string>bar.txt</string>
           <string>baz.txt</string>
       </property>
   </channel>


-> File locations:

   Per-channel XML files can be located in any of the $XDG_CONFIG_DIRS,
   under the subdirectory "xfce4/xfconf/xfce-perchannel-xml/".  The
   user's own settings are saved in $XDG_CONFIG_HOME, under the same
   subdirectory.


-> Elements:

   * <channel>
     Only one <channel> element per file; must be the top-level element.
     Attributes:
       + name(string): The name of the channel (required).
       + version(string): The current file version.  Right now that's
         "1.0".  In general, files with the same 'major version' are
         compatible with each other (required).
       + locked(bool): Whether or not the channel is locked to prevent
         user modification (only allowed in config files in
         non-user-writable locations; optional, defaults to "false").
   * <property>
     Allowed as a child of the <channel> element or another <property>
     element.
     Attributes:
       + name(string): The name of the property (required).
       + type(string): The type of property.  Must be one of: "string",
         "strlist", "int", "int64", "double", "bool", "empty" (required).
       + value(string): The value of the property (required except for
         type="strlist" and type="empty").
       + locked(bool): Whether or not the property is locked to prevent
         user modification (only allowed in config files in
         non-user-writable locations; optional, defaults to "false").
   * <string>
     Only allowed inside <property> elements where type="strlist".  Has
     no attributes; the text between the opening and closing tags is
     the property value.


-> Nesting:

   <property> elements can be nested inside other <property> elements
   to create a hierarchical tree of properties.  If you were to write
   the properties out without a tree (using the above example), including
   the channel name, you'd have:
   
   /HappyApp/main/allow-editing
   /HappyApp/main/last-document
   /HappyApp/history
   
   (These strings are what you'd look up if using libxfconf to retrieve
   property values.)


-> Locking/Kiosk mode:

   System administrators can lock certain values or entire channels to
   prevent users from changing them.  In this case, the administrator
   may provide default values that will be used regardless of what may
   appear in a user-writable configuration file.  If the sysadmin does
   not wish to provide values, but only wants to lock a channel/property,
   the application's default fallback value will be used instead.
   
   Locking a channel or property is as simple as creating a configuration
   file and setting the "locked" attribute to "true" on <channel> or
   <property> elements that should be locked.  This configuration file
   should be placed in a system location that is read by the daemon
   (see "File locations" above).
   
   Note that <channel> locking locks all properties under that channel,
   but <property> locking locks only the property with the locked="true"
   attribute; none of the sub-properties are locked unless they also
   contain the locked="true" attribute.
