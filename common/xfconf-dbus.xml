<?xml version="1.0" encoding="UTF-8"?>

<node name="/org/xfce/Xfconf">
    <interface name="org.xfce.Xfconf">
        <annotation name="org.freedesktop.DBus.GLib.CSymbol" value="xfconf"/>
    
        <!--
             void org.xfce.Xfconf.SetProperty(String channel,
                                              String property,
                                              Variant value)
             
             @channel: A channel/application/namespace name.
             @property: A property name.
             @value: A value to set for @property.  Valid variant
                     types supported so far: [FIXME]
             
             Sets a property value.
        -->
        <method name="SetProperty">
            <arg direction="in" name="channel" type="s"/>
            <arg direction="in" name="property" type="s"/>
            <arg direction="in" name="value" type="v"/>
        </method>
        
        <!--
             Variant org.xfce.Xfconf.GetProperty(String channel,
                                                 String property)
             
             @channel: A channel/application/namespace name.
             @propert: A property name.
             
             Gets a property value, returned as a variant type.
        -->
        <method name="GetProperty">
            <arg direction="in" name="channel" type="s"/>
            <arg direction="in" name="property" type="s"/>
            <arg direction="out" name="value" type="v"/>
        </method>
        
        <!--
             Array{String,Variant} org.xfce.Xfconf.GetAllProperties(String channel)
             
             @channel: A channel/application/namespace name.
             
             Gets all the properties and values that exist in
             @channel.
             
             Returns: An array of properties and values; the
                      properties are strings, and the values are 
                      variants.
        -->
        <method name="GetAllProperties">
            <arg direction="in" name="channel" type="s"/>
            <arg direction="out" name="properties" type="a{sv}"/>
        </method>
        
        <!--
             Boolean org.xfce.Xfconf.PropertyExists(String channel,
                                                    String property)
             
             @channel: A channel/application/namespace name.
             @property: A property name.
             
             Checks to see if @property exists in @channel.
             
             Returns: %TRUE if @property exists, %FALSE if not.
        -->
        <method name="PropertyExists">
            <arg direction="in" name="channel" type="s"/>
            <arg direction="in" name="property" type="s"/>
            <arg direction="out" name="exists" type="b"/>
        </method>
        
        <!--
             void org.xfce.Xfconf.RemoveProperty(String channel,
                                                 String property)
             
             @channel: A channel/application/namespace name.
             @property: A property name.
             
             Removes @property and its value from @channel.
        -->
        <method name="RemoveProperty">
            <arg direction="in" name="channel" type="s"/>
            <arg direction="in" name="property" type="s"/>
        </method>
        
        <!--
             void org.xfce.Xfconf.RemoveChannel(String channel)
             
             @channel: A channel/application/namespace name.
             
             Removes a channel and all properties in it.
        -->
        <method name="RemoveChannel">
            <arg direction="in" name="channel" type="s"/>
        </method>
        
        <!--
             void org.xfce.Xfconf.PropertyChanged(String channel,
                                                  String property)
             
             @channel: A channel/application/namespace name.
             @property: A property name.
             @value: The new value.
             
             Emitted when a property changes.
        -->
        <signal name="PropertyChanged">
            <arg name="channel" type="s"/>
            <arg name="property" type="s"/>
            <arg name="value" type="v"/>
        </signal>

        <!--
             void org.xfce.Xfconf.PropertyRemoved(String channel,
                                                  String property)

             @channel: A channel/application/namespace name.
             @property: A property name.

             Emitted when a property is removed.
        -->
        <signal name="PropertyRemoved">
            <arg name="channel" type="s"/>
            <arg name="property" type="s"/>
        </signal>
    </interface>
    
    <interface name="org.xfce.Xfconf.GUI">
        <annotation name="org.freedesktop.DBus.GLib.CSymbol"
                    value="xfconf_gui"/>
        
        <!--
             void org.xfce.Xfconf.GUI.ShowList(String display)
             
             @display: A display name, or the empty string.
             
             Instructs the Xfconf daemon to display some type
             of GUI element that contains a selectable list of
             settings GUI plugins.  The @display parameter should
             be an X11-style display string on which the GUI
             element should be displayed.  If @display is the
             empty string (not recommended), the GUI will be
             shown on the default display.
        -->
        <method name="ShowList">
            <arg direction="in" name="display" type="s"/>
        </method>
        
        <!--
             void org.xfce.Xfconf.GUI.ShowPlugin(String display,
                                                 String name)
             
             @display: A display name, or the empty string.
             @name: A plugin name.
             
             Instructs the Xfconf daemon to show the settings
             dialog associated with the plugin identified by
             @name.  The @display parameter should be an
             X11-style display string on which the GUI element
             should be displayed.  If @display is the empty
             string (not recommended), the GUI will be shown
             on the default display.
        -->
        <method name="ShowPlugin">
            <arg direction="in" name="display" type="s"/>
            <arg direction="in" name="name" type="s"/>
        </method>
    </interface>
</node>
